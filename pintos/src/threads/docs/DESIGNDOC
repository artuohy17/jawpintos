            +--------------------+
            |        CS 140      |
            | PROJECT 1: THREADS |
            |   DESIGN DOCUMENT  |
            +--------------------+
                   
---- GROUP ----

>> Fill in the names and email addresses of your group members.

Woo Hyun Jin <whjin@stanford.edu>
Joon Yeong Kim <kim64@stanford.edu>
Anand Madhavan <manand@stanford.edu>

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

                 ALARM CLOCK
                 ===========

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

***************************************************************************
*****
static struct list wait_semas;

A sorted list of semaphores for threads put to sleep for timer interrupt
to check for threads that need to wake up.

*****
static struct lock wait_semas_lock;

A lock for wait_semas list access to synchronize insertion into the list.

*****
struct sleep_sema_elem
  {
    struct list_elem elem;
    int wakeup_tick;		/* wake me up when this tick occurs */
    struct semaphore sema;  	/* semaphore to signal the thread to 
    	   	     		   wake up at wakeup_tick */
  };

A struct exclusively for semaphores used for putting threads to sleep.
Contains a semaphore element and the time (tick) it is supposed to 
wake up.
***************************************************************************

---- ALGORITHMS ----

>> A2: Briefly describe what happens in a call to timer_sleep(),
>> including the effects of the timer interrupt handler.

***************************************************************************
In our design, we start with a list of semaphores, wait_semas, for threads 
put to sleep with its wake up time (tick) recorded.

When timer_sleep is called, a semaphore is created and the tick it is 
supposed to wake up at is recorded with the semaphore and combined as 
a sleep_sema elem. 

The element is inserted into wait_semas ordered by increasing wakeup_tick
so that the timer interrupt can only check the front of the list if no
thread is available to wake up.
***************************************************************************


>> A3: What steps are taken to minimize the amount of time spent in
>> the timer interrupt handler?

***************************************************************************
Our initial design for the sleep_sema_elem struct recorded the number of 
ticks left until wake up, which required decrementing of the count for
each thread every time the timer interrupt is called.

The amount of time spent in the timer interrupt was minimized by recording
the tick to wake up instead of ticks left. With this change - and the 
sorted list - the timer interrupt only has to check the front of wait_semas 
if no thread is available to wake up. If N threads are ready, the
frontmost N threads can be popped out of the list and woken up.
***************************************************************************

---- SYNCHRONIZATION ----

>> A4: How are race conditions avoided when multiple threads call
>> timer_sleep() simultaneously?

***************************************************************************
As the description for the global lock wait_semas_lock presents, the lock
is used to lock the access to the global semaphore list, wait_semas.

When multiple threads call timer_sleep() simultaneously, only a single
thread acquires wait_semas_lock each time it inserts its sleep_sema_elem
into wait_semas list. Since the semaphores are inserted in order a single
element at a time, the threads are always woken up in the correct order.

Thus the race condition is resolved.
***************************************************************************

>> A5: How are race conditions avoided when a timer interrupt occurs
>> during a call to timer_sleep()?

***************************************************************************
Race condition occurs when access to the list of sleeping threads, 
wait_semas, is not controlled properly. In our design, the frontmost
element of wait_semas list is checked each time the timer interrupt occurs
and if the first N thread's sleep time have expired, it wakes the threads 
by upping the corresponding semaphore and removing the element from 
wait_semas list. 

We use lock_try_acquire to limit the access to wait_semas list for cases 
where the timer interrupt is called within the critical section we have 
locked inside timer_sleep (), i.e. where the sleep_sema_elem is inserted
into wait_semas list. If lock_try_acquire () fails, it skips checking and
accessing the wait_semas, thus preserving the previous state of the list.

Hence, race condition does not occur from this scenario.
***************************************************************************

---- RATIONALE ----

>> A6: Why did you choose this design?  In what ways is it superior to
>> another design you considered?

***************************************************************************
As discussed in Question A3, our initial design recorded remaining ticks 
to wake-up instead of wake-up-tick. The current design is much better than
previous because it reduces the number of instructions the timer interrupt
has to handle tremendously, from linear to a constant. 

The list of threads put to sleep, wait_semas, could have been replaced by 
a more efficient data structure such as a heap since the OS involves
insertion in order which takes O(log N) time. However, because we were 
provided with linked list structure which is much more reliable than
the code we may have produced, we chose safety over efficiency for
data structure.
***************************************************************************


             PRIORITY SCHEDULING
             ===================

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

>> B2: Explain the data structure used to track priority donation.
>> Use ASCII art to diagram a nested donation.  (Alternately, submit a
>> .png file.)

---- ALGORITHMS ----

>> B3: How do you ensure that the highest priority thread waiting for
>> a lock, semaphore, or condition variable wakes up first?

>> B4: Describe the sequence of events when a call to lock_acquire()
>> causes a priority donation.  How is nested donation handled?

>> B5: Describe the sequence of events when lock_release() is called
>> on a lock that a higher-priority thread is waiting for.

---- SYNCHRONIZATION ----

>> B6: Describe a potential race in thread_set_priority() and explain
>> how your implementation avoids it.  Can you use a lock to avoid
>> this race?

---- RATIONALE ----

>> B7: Why did you choose this design?  In what ways is it superior to
>> another design you considered?

              ADVANCED SCHEDULER
              ==================

---- DATA STRUCTURES ----

>> C1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

---- ALGORITHMS ----

>> C2: Suppose threads A, B, and C have nice values 0, 1, and 2.  Each
>> has a recent_cpu value of 0.  Fill in the table below showing the
>> scheduling decision and the priority and recent_cpu values for each
>> thread after each given number of timer ticks:

timer  recent_cpu    priority   thread
ticks   A   B   C   A   B   C   to run
-----  --  --  --  --  --  --   ------
 0
 4
 8
12
16
20
24
28
32
36

>> C3: Did any ambiguities in the scheduler specification make values
>> in the table uncertain?  If so, what rule did you use to resolve
>> them?  Does this match the behavior of your scheduler?

>> C4: How is the way you divided the cost of scheduling between code
>> inside and outside interrupt context likely to affect performance?

---- RATIONALE ----

>> C5: Briefly critique your design, pointing out advantages and
>> disadvantages in your design choices.  If you were to have extra
>> time to work on this part of the project, how might you choose to
>> refine or improve your design?

>> C6: The assignment explains arithmetic for fixed-point math in
>> detail, but it leaves it open to you to implement it.  Why did you
>> decide to implement it the way you did?  If you created an
>> abstraction layer for fixed-point math, that is, an abstract data
>> type and/or a set of functions or macros to manipulate fixed-point
>> numbers, why did you do so?  If not, why not?

               SURVEY QUESTIONS
               ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

>> Any other comments?
Testing
