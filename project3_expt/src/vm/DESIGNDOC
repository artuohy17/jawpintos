                    +---------------------------+
            |           CS 140          |
            | PROJECT 3: VIRTUAL MEMORY |
            |      DESIGN DOCUMENT      |
            +---------------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

Woo Hyun Jin <whjin@stanford.edu>
Joon Yeong Kim <kim64@stanford.edu>
Anand Madhavan <manand@stanford.edu>

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

            PAGE TABLE MANAGEMENT
            =====================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

---- ALGORITHMS ----

>> A2: In a few paragraphs, describe your code for locating the frame,
>> if any, that contains the data of a given page.

>> A3: How does your code coordinate accessed and dirty bits between
>> kernel and user virtual addresses that alias a single frame, or
>> alternatively how do you avoid the issue?

---- SYNCHRONIZATION ----

>> A4: When two user processes both need a new frame at the same time,
>> how are races avoided?

---- RATIONALE ----

>> A5: Why did you choose the data structure(s) that you did for
>> representing virtual-to-physical mappings?

               PAGING TO AND FROM DISK
               =======================

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

---- ALGORITHMS ----

>> B2: When a frame is required but none is free, some frame must be
>> evicted.  Describe your code for choosing a frame to evict.

>> B3: When a process P obtains a frame that was previously used by a
>> process Q, how do you adjust the page table (and any other data
>> structures) to reflect the frame Q no longer has?

>> B4: Explain your heuristic for deciding whether a page fault for an
>> invalid virtual address should cause the stack to be extended into
>> the page that faulted.

---- SYNCHRONIZATION ----

>> B5: Explain the basics of your VM synchronization design.  In
>> particular, explain how it prevents deadlock.  (Refer to the
>> textbook for an explanation of the necessary conditions for
>> deadlock.)

>> B6: A page fault in process P can cause another process Q's frame
>> to be evicted.  How do you ensure that Q cannot access or modify
>> the page during the eviction process?  How do you avoid a race
>> between P evicting Q's frame and Q faulting the page back in?

>> B7: Suppose a page fault in process P causes a page to be read from
>> the file system or swap.  How do you ensure that a second process Q
>> cannot interfere by e.g. attempting to evict the frame while it is
>> still being read in?

>> B8: Explain how you handle access to paged-out pages that occur
>> during system calls.  Do you use page faults to bring in pages (as
>> in user programs), or do you have a mechanism for "locking" frames
>> into physical memory, or do you use some other design?  How do you
>> gracefully handle attempted accesses to invalid virtual addresses?

---- RATIONALE ----

>> B9: A single lock for the whole VM system would make
>> synchronization easy, but limit parallelism.  On the other hand,
>> using many locks complicates synchronization and raises the
>> possibility for deadlock but allows for high parallelism.  Explain
>> where your design falls along this continuum and why you chose to
>> design it this way.

             MEMORY MAPPED FILES
             ===================

---- DATA STRUCTURES ----

>> C1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.
********************************************************************
We maintain a per-thread mapping information. In thread.h, 
struct thread now contains these additional members:

uint32_t next_mmapping_id; /* id for the next mapping requested */
struct list mmappings; /* list of mmapped files, their upages, ids */

Each element in the list is a:
struct mapid_elem 
  {   
    mapid_t id;        /* mapping id for mmap */
    void *start_upage; /* starting mapped upage pointer */
    struct file *fp;   /* file size determines how many pages exist */
    struct list_elem elem;
  }; 

next_mmapping_id: contains the next id to be assigned when mmap
call comes in. 

mmappings: A list of mmapped files and their map-ids are kept
track of and used to unload files from memory to disk when these
are unmapped.

mapid_elem: list_elem for the mmappings
id: map_id that is the assigned mapping id for the mmap call.
start_upage: starting user address that this file maps on to.
fp: file pointer for the mmap.

---- ALGORITHMS ----
(JOON, WOO:
REVISIT_SWAP_EVICT note: currently tests pass without change to the
eviction strategy, but we should work on swap_evict writing this out 
to file as well, not sure how to detect that a frame is mmapped
since this now has source FRAME_FILE, you guys will have better
ideas for this, looks like we need a separate member other than source
that needs to track this. 
Basic idea differentiation that needs to be made is:
if the page is not writable evict. simple. 
if the page is writable
  if page maps to executable 
    write to swap
  else if page to mmap
    write to file
END NOTE)

>> C2: Describe how memory mapped files integrate into your virtual
>> memory subsystem.  Explain how the page fault and eviction
>> processes differ between swap pages and other pages.
Memory mapped files are files that are marked with FRAME_FILE sources
and during page_fault are read into memory just like text segments of 
executables. The only difference is that during mapping and unmapping
we also additionally write out the data to the files if these regions
have been edited and are writable.

(REVISIT_SWAP_EVICT, should work on swap_evict writing this out to file
as well, not sure how to handle this with existing code).

>> C3: Explain how you determine whether a new file mapping overlaps
>> any existing segment.
During the mmap call, syscall_mmap is called which in turn  
goes sequentially through each PGSIZE offset (upto the length of the
file, taking into account the page boundaries) and checks using
spt_page_exist to make sure that the memory location for the
page does not already have an entry in the supplementary page table.
If it does we return -1. If it doesn't we check every other page
for the file. If all of them don't overlap, we proceed to update the 
supplementary page table with the information as to the source of the
data and other details.

---- RATIONALE ----

>> C4: Mappings created with "mmap" have similar semantics to those of
>> data demand-paged from executables, except that "mmap" mappings are
>> written back to their original files, not to swap.  This implies
>> that much of their implementation can be shared.  Explain why your
>> implementation either does or does not share much of the code for
>> the two situations.
Our implementation does indeed share much of the code. In the case
of mmapped files we write files out to the disk during the unmapping
call. 
(REVISIT_SWAP_EVICT, should work on swap_evict writing this out to file
as well, not sure how to handle this with existing code).
 

               SURVEY QUESTIONS
               ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

>> Any other comments?
