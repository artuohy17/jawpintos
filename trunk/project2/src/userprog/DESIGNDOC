             +--------------------------+
             |          CS 140          |
             | PROJECT 2: USER PROGRAMS |
             |     DESIGN DOCUMENT      |
             +--------------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

Woo Hyun Jin <whjin@stanford.edu>
Joon Yeong Kim <kim64@stanford.edu>
Anand Madhavan <manand@stanford.edu>

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

               ARGUMENT PASSING
               ================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

***************************************************************************
/* argument element struct used for the list that is 
   used to keep track of the string pointer and 
   address of the arguments in the stack */
struct argv_elem 
  {
    char *argv;               /* argument string */
    void *addr;               /* argument address in stack */
    struct list_elem elem;   
  };

Element to put in the list that stores the string pointers and
their addresses when pushing arguments and their addresses into
the stack.
***************************************************************************

---- ALGORITHMS ----

>> A2: Briefly describe how you implemented argument parsing.  How do
>> you arrange for the elements of argv[] to be in the right order?
>> How do you avoid overflowing the stack page?

***************************************************************************
Right after the stack frame has been initialized and load has completed, 
we push the arguments - via the push_arguments function defined in 
process.c - by tokenizing the command line input received and copying 
each token (the argv[n][..]'s), from left to right, to the stack. At the 
same time, the address of the tokens in the stack are stored and pushed 
back to the argv_list, from left to right, so that it can be retrieved 
later for pushing in argv[n]'s to the stack. 

After the tokens have been copied into the stack, the stack is
word-aligned so that the stack pointer points to an address that is a 
multiple of 4. The sentinel of 0 is pushed in, and the argument address,
that we stored in argv_list, are pushed into the stack, followed by
the number of arguments, argc. Because we copied the arguments from
left to right and inserted into the back of the argv_list in the same
order, we push the addresses in the opposite order by popping from the
back of the list to ensure that the argument addresses are pushed in
the right order.

The stack page overflow is avoided by checking that the sum of the
lengths of token strings and the space needed for the argument
addresses, return address, and etc. is less than the page size as we
push the arguments into the stack. If the number of bytes needed exceeds
the page size, we terminate the process. 
***************************************************************************

---- RATIONALE ----

>> A3: Why does Pintos implement strtok_r() but not strtok()?

***************************************************************************
strtok keeps internal state to track the tokens across a sequence of calls 
by the caller. This makes it thread unsafe, because two callers cannot call 
it at the same time and expect reliable outputs. The strtok_r alleviates 
this by taking a third parameter which keeps this state, thus allowing for 
a thread-safe implementation.
***************************************************************************

>> A4: In Pintos, the kernel separates commands into a executable name
>> and arguments.  In Unix-like systems, the shell does this
>> separation.  Identify at least two advantages of the Unix approach.

                 SYSTEM CALLS
                 ============

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

>> B2: Describe how file descriptors are associated with open files.
>> Are file descriptors unique within the entire OS or just within a
>> single process?

---- ALGORITHMS ----

>> B3: Describe your code for reading and writing user data from the
>> kernel.

>> B4: Suppose a system call causes a full page (4,096 bytes) of data
>> to be copied from user space into the kernel.  What is the least
>> and the greatest possible number of inspections of the page table
>> (e.g. calls to pagedir_get_page()) that might result?  What about
>> for a system call that only copies 2 bytes of data?  Is there room
>> for improvement in these numbers, and how much?

>> B5: Briefly describe your implementation of the "wait" system call
>> and how it interacts with process termination.

>> B6: Any access to user program memory at a user-specified address
>> can fail due to a bad pointer value.  Such accesses must cause the
>> process to be terminated.  System calls are fraught with such
>> accesses, e.g. a "write" system call requires reading the system
>> call number from the user stack, then each of the call's three
>> arguments, then an arbitrary amount of user memory, and any of
>> these can fail at any point.  This poses a design and
>> error-handling problem: how do you best avoid obscuring the primary
>> function of code in a morass of error-handling?  Furthermore, when
>> an error is detected, how do you ensure that all temporarily
>> allocated resources (locks, buffers, etc.) are freed?  In a few
>> paragraphs, describe the strategy or strategies you adopted for
>> managing these issues.  Give an example.

---- SYNCHRONIZATION ----

>> B7: The "exec" system call returns -1 if loading the new executable
>> fails, so it cannot return before the new executable has completed
>> loading.  How does your code ensure this?  How is the load
>> success/failure status passed back to the thread that calls "exec"?

>> B8: Consider parent process P with child process C.  How do you
>> ensure proper synchronization and avoid race conditions when P
>> calls wait(C) before C exits?  After C exits?  How do you ensure
>> that all resources are freed in each case?  How about when P
>> terminates without waiting, before C exits?  After C exits?  Are
>> there any special cases?

---- RATIONALE ----

>> B9: Why did you choose to implement access to user memory from the
>> kernel in the way that you did?

>> B10: What advantages or disadvantages can you see to your design
>> for file descriptors?

>> B11: The default tid_t to pid_t mapping is the identity mapping.
>> If you changed it, what advantages are there to your approach?

***************************************************************************
In project 2 version of Pintos, each process is associated with just one 
thread (itself) and no more. So our approach has been to retain the 
identity mapping. This straightforward approach kept the code very 
understandable and simple. If however, a process were to be associated with 
more than one threads, one can see how a mechanism to associate all threads 
that are part of the same process can be beneficial and result in 
efficiency gains. 
***************************************************************************


               SURVEY QUESTIONS
               ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?
Took just about the right amount of time for its reputation.

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?
syscall handling gave us a great idea of how user processes and the kernel interact.

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?
No, you guys're doing a great job.

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?
Please don't dock so much points on the subjective-evaluation part of our first assignment but if you HAVE to, do make the first assignment not count for so much of the grade. It is very demotivating for the rest of the quarter.
 
>> Any other comments?
