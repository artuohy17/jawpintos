       	       	     +-------------------------+
		     |		CS 140	       |
		     | PROJECT 4: FILE SYSTEMS |
		     |	   DESIGN DOCUMENT     |
		     +-------------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

Woo Hyun Jin <whjin@stanford.edu>
Joon Yeong Kim <kim64@stanford.edu>
Anand Madhavan <manand@stanford.edu>

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

		     INDEXED AND EXTENSIBLE FILES
		     ============================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.
***************************************************************************
In inode.c:

struct inode_disk
  {
    ...
    block_sector_t multi_index[MI_SIZE];  /* Multi-level block index */
    bool is_dir;                          /* Directory or file */
    block_sector_t parent_dir_sector;     /* Parent directory */
    ...
  };

We store a vector of block_sector_t's that correspond to the first level
of the multi-index table. It is of size MI_SIZE (defined as 124).
The first 100 entries in the table are direct entries 
(defined by MI_NUM_DIRECT). The next entries (MI_NUM_INDIRECT)
are sector values for the indirect table entries. The last entry corresponds
to the doubly indirect table entry.

We store a bool 'is_dir' in the inode_disk to indicate whether the inode 
is a file or a directory.

We store a block_sector_t corresponding to the parent directory sector.

In inode.c:

struct inode
  { 
     ...
    struct lock extension_lock;       /*lock for extension of file */
     ...
  }

We store an extension_lock per inode. This is locked by threads that want
to extend the file.
***************************************************************************

>> A2: What is the maximum size of a file supported by your inode
>> structure?  Show your work.
***************************************************************************
Our multi-level indexing table has a total of 124 slots with 100 direct 
slots, 23 indirect slots and 1 doubly indirect slot. Assuming that the
file system is 8MB large, which is 8388608 bytes = 16384 512-byte sectors,
the maximum file size supported by our inode structure is :

The total amount of space allocated by direct slots is:
100 * 512 bytes.

The total amount of space allocated by indirect slots is:
(23 * (512 / 4) * 512) + (512 * 23) bytes.

Where the first expression is that of the actual data and the second is
the metadata that has the the pointers to file blocks.

After direct and indirect blocks, the total allocated bytes = 1570304
bytes.

Total Metadata and data allocated by doubly indirect should be :
6818304.

Since we have only one doubly indirect block, it uses a single block for
indirect pointers, which nees 512 bytes.
The number of (direct block pointer tables + data blocks) that can be
allocated is:
(6818304 - 512) / (512 + (512 / 4) * 512) = 103.224806.

Thus we allocate 104 direct block tables, which are 53248 bytes total.

Thus, the total number of sectors we use for metadata are:
23 + 1 + 104 = 128 blocks.

Max size of a file = (16384 - 128) * 512 = 8 323 072 bytes
***************************************************************************


---- SYNCHRONIZATION ----

>> A3: Explain how your code avoids a race if two processes attempt to
>> extend a file at the same time.
***************************************************************************
We have created a function called extend_and_write which is called when
a process attempts to extend a file. The entire function is locked by
a lock which exists per file (inode). When two processes simultaneously
tries to extend a file, they both call extend_and_write. However, 
since the entire function is locked, only one of them finishes its entire
extension atomically. The second process that acquires the lock, then,
overwrites on top of what the first process has written.
***************************************************************************

>> A4: Suppose processes A and B both have file F open, both
>> positioned at end-of-file.  If A reads and B writes F at the same
>> time, A may read all, part, or none of what B writes.  However, A
>> may not read data other than what B writes, e.g. if B writes
>> nonzero data, A is not allowed to see all zeros.  Explain how your
>> code avoids this race.
***************************************************************************
We have implemented that file_read doesn't read or return anything if
it attempts to read past EOF (or the inode length in our case). 

File extension writes the data block by block, to either the remainder 
of the existing block or a whole new block. The key to this method is to
update the length of the file after file write to the block has completed.
This way, we avoid process A reading beyond what B has written.
***************************************************************************

>> A5: Explain how your synchronization design provides "fairness".
>> File access is "fair" if readers cannot indefinitely block writers
>> or vice versa.  That is, many processes reading from a file cannot
>> prevent forever another process from writing the file, and many
>> processes writing to a file cannot prevent another process forever
>> from reading the file.
***************************************************************************
We provide "fairness" by allowing only the threads that extend and write
to actually block. The reader threads are not synchronized and can read 
as and when they enter and can only read upto length (which is updated 
only after the extend and write). This provides fairness to the readers 
when writers are writing to the file. When many processes read from a 
file, we still allow the writers to write and extend the file by 
acquiring a lock for the inode (called the 'extension_lock'). 

***************************************************************************

---- RATIONALE ----

>> A6: Is your inode structure a multilevel index?  If so, why did you
>> choose this particular combination of direct, indirect, and doubly
>> indirect blocks?  If not, why did you choose an alternative inode
>> structure, and what advantages and disadvantages does your
>> structure have, compared to a multilevel index?
***************************************************************************

***************************************************************************

			    SUBDIRECTORIES
			    ==============

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.
***************************************************************************

***************************************************************************

---- ALGORITHMS ----

>> B2: Describe your code for traversing a user-specified path.  How
>> do traversals of absolute and relative paths differ?
***************************************************************************

***************************************************************************

---- SYNCHRONIZATION ----

>> B4: How do you prevent races on directory entries?  For example,
>> only one of two simultaneous attempts to remove a single file
>> should succeed, as should only one of two simultaneous attempts to
>> create a file with the same name, and so on.
***************************************************************************

***************************************************************************

>> B5: Does your implementation allow a directory to be removed if it
>> is open by a process or if it is in use as a process's current
>> working directory?  If so, what happens to that process's future
>> file system operations?  If not, how do you prevent it?
***************************************************************************

***************************************************************************

---- RATIONALE ----

>> B6: Explain why you chose to represent the current directory of a
>> process the way you did.
***************************************************************************

***************************************************************************

			     BUFFER CACHE
			     ============

---- DATA STRUCTURES ----

>> C1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.
***************************************************************************

***************************************************************************

---- ALGORITHMS ----

>> C2: Describe how your cache replacement algorithm chooses a cache
>> block to evict.
***************************************************************************

***************************************************************************

>> C3: Describe your implementation of write-behind.
***************************************************************************

***************************************************************************

>> C4: Describe your implementation of read-ahead.
***************************************************************************

***************************************************************************

---- SYNCHRONIZATION ----

>> C5: When one process is actively reading or writing data in a
>> buffer cache block, how are other processes prevented from evicting
>> that block?
***************************************************************************

***************************************************************************

>> C6: During the eviction of a block from the cache, how are other
>> processes prevented from attempting to access the block?
***************************************************************************

***************************************************************************

---- RATIONALE ----

>> C7: Describe a file workload likely to benefit from buffer caching,
>> and workloads likely to benefit from read-ahead and write-behind.
***************************************************************************

***************************************************************************

			   SURVEY QUESTIONS
			   ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students in future quarters?

>> Any other comments?
